<project name="gdx-OpenBSD-64" basedir="." default="postcompile">
	<!-- include the environment -->
	<property environment="env"/>	
	<!-- output directory for temporary object files -->
	<property name="buildDir" value="../target/native/openbsd64" />
	<!-- output directory for the shared library -->
	<property name="libsDir" value="../libs/openbsd64" />
	<!-- the name of the shared library -->
	<property name="libName" value="libgdx64.so"/>
	<!-- the jni header jniPlatform to use -->
	<property name="jniPlatform" value="linux"/>
	<!-- the compilerPrefix for the C & C++ compilers -->
	<property name="compilerPrefix" value=""/>
	<!--  the compilerSuffix for the C & C++ compilers -->	
	<property name="compilerSuffix" value="" />	
	
	<!-- define cc compiler, options and files to compile -->
	<property name="cc" value="${compilerPrefix}cc${compilerSuffix}"/>	
	<property name="cc-opts" value="-c -Wall -O2 -fPIC"/>
	<fileset id="cc-files" dir="./">
		<exclude name="target/"/>		
				<include name="memcpy_wrap.c"/>
		<include name="**/*.c"/>

		
	</fileset>
	
	<!-- define c++ compiler, options and files to compile -->
	<property name="c++" value="${compilerPrefix}c++${compilerSuffix}"/>
	<property name="c++-opts" value="-c -Wall -O2 -fPIC"/>
	<fileset id="c++-files" dir="./">
		<exclude name="target/"/>
				<include name="**/*.cpp"/>

				<exclude name="iosgl/**"/>

	</fileset>

	<!-- define linker and options -->
	<property name="linker" value="${compilerPrefix}c++${compilerSuffix}"/>
	<property name="linker-opts" value="-shared"/>
	<property name="libraries" value=""/>

	<!-- define stripper -->
	<property name="stripper" value="${compilerPrefix}strip${compilerSuffix}"/>
	
	<!-- cleans the build directory, removes all object files and shared libs -->
	<target name="clean">
		<delete includeemptydirs="true" quiet="true">
			<fileset dir="${buildDir}"/>
			<fileset dir="${libsDir}" includes="**/*" excludes="**/.svn"/>
		</delete>
	</target>
	
	<target name="precompile">
		<condition property="compiler-found">
			<and>
				<or>
					<!-- Include both b/c Windows might be either -->
					<available file="${c++}" filepath="${env.PATH}"/>
					<available file="${c++}" filepath="${env.Path}"/>
				</or>
				<or>
					<!-- Include both b/c Windows might be either -->
					<available file="${cc}" filepath="${env.PATH}"/>
					<available file="${cc}" filepath="${env.Path}"/>
				</or>
			</and>
		</condition>
		<condition property="has-compiler">
			<equals arg1="${compiler-found}" arg2="true"/>
		</condition>
		<condition property="stripper-found">
			<or>
				<!-- Include both b/c Windows might be either -->
				<available file="${stripper}" filepath="${env.PATH}"/>
				<available file="${stripper}" filepath="${env.Path}"/>
			</or>
		</condition>
		<condition property="should-strip">
			<and>
				<equals arg1="${stripper-found}" arg2="true"/>
				<equals arg1="${release}" arg2="true"/>
				<!-- Don't strip mac osx libs -->
				<not>
					<contains string="${libName}" substring="dylib"/>
				</not>
			</and>
		</condition>
		
	</target>
	
	<target name="create-build-dir" depends="precompile" if="has-compiler">
		<!-- FIXME this is pretty nasty :/ -->
		<copy todir="${buildDir}">
			<fileset refid="c++-files"/>
			<fileset refid="cc-files"/>
		</copy>
		<delete>
			<fileset dir="${buildDir}">
				<include name="*"/>
				<exclude name="*.o"/>
			</fileset>
		</delete>
	</target>

	<!-- compiles all C and C++ files to object files in the build directory -->
	<target name="compile" depends="create-build-dir" if="has-compiler">
		<mkdir dir="${buildDir}"/>
		<apply failonerror="true" executable="${c++}" dest="${buildDir}" verbose="true">
			<arg line="${c++-opts}"/>
			<arg value="-Ijni-headers"/>
			<arg value="-Ijni-headers/${jniPlatform}"/>
			<arg value="-I."/>
			
			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<fileset refid="c++-files"/>
			<compositemapper>
				<mapper type="glob" from="*.cpp" to="*.o"/>
				<mapper type="glob" from="*.mm" to="*.o"/>
			</compositemapper>
		</apply>
		<apply failonerror="true" executable="${cc}" dest="${buildDir}" verbose="true">
			<arg line="${cc-opts}"/>
			<arg value="-Ijni-headers"/>
			<arg value="-Ijni-headers/${jniPlatform}"/>
			<arg value="-I."/>
			
			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<fileset refid="cc-files"/>
			<compositemapper>
				<mapper type="glob" from="*.c" to="*.o"/>
				<mapper type="glob" from="*.m" to="*.o"/>
			</compositemapper>
		</apply>
	</target>	

	<!-- links the shared library based on the previously compiled object files -->	
	<target name="link" depends="compile" if="has-compiler">
		<fileset dir="${buildDir}" id="objFileSet">
			<patternset>
				<include name="**/*.o" />
			</patternset>
		</fileset>
		<pathconvert pathsep=" " property="objFiles" refid="objFileSet" />
		<mkdir dir="${libsDir}" />
		<exec executable="${linker}" failonerror="true" dir="${buildDir}">
			<arg line="${linker-opts}" />
			<arg value="-o" />
			<arg path="${libsDir}/${libName}" />
			<arg line="${objFiles}"/>
			<arg line="${libraries}" />
		</exec>
	</target>	

	<!-- strips the shared library of debug symbols -->
	<target name="strip" depends="link" if="should-strip">
		<exec executable="${stripper}" failonerror="true" dir="${buildDir}">
			<arg value="--strip-unneeded"/>
			<arg path="${libsDir}/${libName}" />
		</exec>
	</target>
	
	<target name="postcompile" depends="strip">
		
	</target>
</project>
